% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/iterativeAssemble.R
\name{iterativeAssemble}
\alias{iterativeAssemble}
\title{iterativeAssemble}
\usage{
iterativeAssemble(
  input.reads = NULL,
  reference = NULL,
  output.name = NULL,
  mapper = "bbmap",
  min.iterations = 5,
  max.iterations = 20,
  min.length = 16000,
  max.length = 30000,
  min.ref.id = 0.75,
  memory = 1,
  threads = 1,
  spades.path = "spades.py",
  bbmap.path = "bbmap.sh",
  cap3.path = "cap3",
  resume = TRUE,
  overwrite = FALSE,
  quiet = TRUE
)
}
\arguments{
\item{input.reads}{path to a folder of raw reads in fastq format.}

\item{reference}{a csv file with a "File" and "Sample" columns, where "File" is the file name and "Sample" is the desired renamed file}

\item{output.name}{the new directory to save the adaptor trimmed sequences}

\item{mapper}{"Sample" to run on a single sample or "Directory" to run on a directory of samples}

\item{min.iterations}{system path to fastp in case it can't be found}

\item{max.iterations}{system path to fastp in case it can't be found}

\item{min.length}{system path to fastp in case it can't be found}

\item{max.length}{system path to fastp in case it can't be found}

\item{min.ref.id}{system path to fastp in case it can't be found}

\item{threads}{number of computation processing threads}

\item{spades.path}{system path to fastp in case it can't be found}

\item{bbmap.path}{system path to fastp in case it can't be found}

\item{cap3.path}{system path to fastp in case it can't be found}

\item{resume}{TRUE to skip samples already completed}

\item{overwrite}{TRUE to overwrite a folder of samples with output.dir}

\item{quiet}{TRUE to supress screen output}

\item{mem}{amount of system memory to use}
}
\value{
a new directory of adaptor trimmed reads and a summary of the trimming in logs/
}
\description{
Function for removing adaptor sequences from raw Illumina sequence data using the program fastp
}
\examples{

your.tree = ape::read.tree(file = "file-path-to-tree.tre")
astral.data = astralPlane(astral.tree = your.tree,
                          outgroups = c("species_one", "species_two"),
                          tip.length = 1)


}
